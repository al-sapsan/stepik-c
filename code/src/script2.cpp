/***
 * @file test2.cpp
 * @brief –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤: –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ —Å –º–∞–∫—Å–∏–º—É–º–æ–º, –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
 * @version 1.4
 * @date 2025-07-07
 */

// === Core ===
#include <iostream>
#include <cstdlib>
#include <cstdint>

/*** –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö ***/
typedef int16_t i16_t;
typedef uint16_t u16_t;
typedef uint32_t u32_t;

/*** –ú–∞–∫—Ä–æ—Å—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ***/
#define CHECK_NULL(ptr) \
    do { \
        if (!(ptr)) { \
            std::cerr << "–û—à–∏–±–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏!" << std::endl; \
            std::exit(1); \
        } \
    } while (0)

/*** üß© –ü—Ä–æ—Ç–æ—Ç–∏–ø—ã —Ñ—É–Ω–∫—Ü–∏–π ***/

/**
 * @brief –°–æ–∑–¥–∞—ë—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤
 * @param rows –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
 * @param cols –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤
 * @return –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –º–∞—Å—Å–∏–≤ —É–∫–∞–∑–∞—Ç–µ–ª–µ–π
 */
i16_t** create_2d_array(i16_t rows, i16_t cols);

/**
 * @brief –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –ø–∞–º—è—Ç—å, –∑–∞–Ω—è—Ç—É—é –¥–≤—É–º–µ—Ä–Ω—ã–º –º–∞—Å—Å–∏–≤–æ–º
 * @param arr –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –º–∞—Å—Å–∏–≤ —É–∫–∞–∑–∞—Ç–µ–ª–µ–π
 * @param rows –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
 */
void free_2d_array(i16_t** arr, i16_t rows);

/**
 * @brief –ó–∞–ø–æ–ª–Ω—è–µ—Ç –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏ –æ—Ç 1 –¥–æ 10
 * @param arr –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –º–∞—Å—Å–∏–≤ —É–∫–∞–∑–∞—Ç–µ–ª–µ–π
 * @param rows –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
 * @param cols –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤
 * @param seed –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
 */
void fill_2d_array_random(i16_t** arr, i16_t rows, i16_t cols, i16_t seed);

/**
 * @brief –ü–µ—á–∞—Ç–∞–µ—Ç –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã —Å —Ç–∞–±—É–ª—è—Ü–∏–µ–π
 * @param arr –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –º–∞—Å—Å–∏–≤ —É–∫–∞–∑–∞—Ç–µ–ª–µ–π
 * @param rows –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
 * @param cols –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤
 */
void print_2d_array(i16_t** arr, i16_t rows, i16_t cols);

/**
 * @brief –ù–∞—Ö–æ–¥–∏—Ç –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–µ–π –ø–µ—Ä–≤—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞
 * @param arr –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –º–∞—Å—Å–∏–≤ —É–∫–∞–∑–∞—Ç–µ–ª–µ–π
 * @param rows –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
 * @param cols –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤
 * @return –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ —Å –ø–µ—Ä–≤—ã–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
 */
i16_t find_row_of_first_max(i16_t** arr, i16_t rows, i16_t cols);

/**
 * @brief –î—É–±–ª–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –º–∞—Å—Å–∏–≤–∞ (–≤—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–ø–∏—é –ø–æ—Å–ª–µ –Ω–µ—ë)
 * @param arr –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –º–∞—Å—Å–∏–≤ —É–∫–∞–∑–∞—Ç–µ–ª–µ–π (—Å—Ç–∞—Ä—ã–π –º–∞—Å—Å–∏–≤ –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω)
 * @param rows [in,out] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ (–±—É–¥–µ—Ç —É–≤–µ–ª–∏—á–µ–Ω–æ)
 * @param cols –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤
 * @param row_to_duplicate –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
 * @return –ù–æ–≤—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –º–∞—Å—Å–∏–≤ —É–∫–∞–∑–∞—Ç–µ–ª–µ–π
 */
i16_t** duplicate_row(i16_t** arr, i16_t& rows, i16_t cols, i16_t row_to_duplicate);

/***
 * @brief –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞. –§–æ—Ä–º–∏—Ä—É–µ—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ –ø–æ –∑–∞–¥–∞–Ω–∏—é
 * @return 0 –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
 */
int main(void)
{
    i16_t rows = 0, cols = 0, seed = 0;
    std::cin >> rows >> cols >> seed;
    i16_t** arr = create_2d_array(rows, cols);
    CHECK_NULL(arr);
    fill_2d_array_random(arr, rows, cols, seed);
    print_2d_array(arr, rows, cols);
    std::cout << std::endl;
    i16_t row_max = find_row_of_first_max(arr, rows, cols);
    i16_t** arr2 = duplicate_row(arr, rows, cols, row_max);
    CHECK_NULL(arr2);
    arr = arr2;
    print_2d_array(arr, rows, cols);
    free_2d_array(arr, rows);
    return 0;
}

/*** üß© –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π ***/
i16_t** create_2d_array(i16_t rows, i16_t cols)
{
    i16_t** arr = new (std::nothrow) i16_t*[rows];
    CHECK_NULL(arr);
    for (i16_t i = 0; i < rows; ++i)
    {
        arr[i] = new (std::nothrow) i16_t[cols];
        CHECK_NULL(arr[i]);
    }
    return arr;
}

void free_2d_array(i16_t** arr, i16_t rows)
{
    if (!arr) return;
    for (i16_t i = 0; i < rows; ++i)
    {
        delete[] arr[i];
    }
    delete[] arr;
}

void fill_2d_array_random(i16_t** arr, i16_t rows, i16_t cols, i16_t seed)
{
    std::srand(static_cast<u32_t>(seed));
    for (i16_t i = 0; i < rows; ++i)
    {
        for (i16_t j = 0; j < cols; ++j)
        {
            arr[i][j] = static_cast<i16_t>(std::rand() % 10 + 1);
        }
    }
}

void print_2d_array(i16_t** arr, i16_t rows, i16_t cols)
{
    for (i16_t i = 0; i < rows; ++i)
    {
        for (i16_t j = 0; j < cols; ++j)
        {
            std::cout << arr[i][j] << '\t';
        }
        std::cout << '\n';
    }
}

i16_t find_row_of_first_max(i16_t** arr, i16_t rows, i16_t cols)
{
    i16_t max_val = arr[0][0];
    i16_t max_row = 0;
    for (i16_t i = 0; i < rows; ++i)
    {
        for (i16_t j = 0; j < cols; ++j)
        {
            if (arr[i][j] > max_val)
            {
                max_val = arr[i][j];
                max_row = i;
            }
        }
    }
    return max_row;
}

i16_t** duplicate_row(i16_t** arr, i16_t& rows, i16_t cols, i16_t row_to_duplicate)
{
    i16_t** new_arr = new (std::nothrow) i16_t*[rows + 1];
    CHECK_NULL(new_arr);
    i16_t k = 0;
    for (i16_t i = 0; i < rows + 1; ++i)
    {
        if (i == row_to_duplicate + 1)
        {
            new_arr[i] = new (std::nothrow) i16_t[cols];
            CHECK_NULL(new_arr[i]);
            for (i16_t j = 0; j < cols; ++j)
            {
                new_arr[i][j] = arr[row_to_duplicate][j];
            }
        }
        else
        {
            new_arr[i] = arr[k++];
        }
    }
    delete[] arr;
    ++rows;
    return new_arr;
}
