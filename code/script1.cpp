/**
 * @file test1.cpp
 * @brief –¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏ –≤—ã–≤–æ–¥–æ–º (emb_style_cpp.h)
 * @version 1.0
 * @date 2025-07-08
 */

#include "emb_style_cpp.h"
#include <iostream>
#include <cstdlib>
#include <cstdint>

typedef int32_t i32_t;
typedef int16_t i16_t;

/*** üß© –ü—Ä–æ—Ç–æ—Ç–∏–ø—ã —Ñ—É–Ω–∫—Ü–∏–π ***/

/**
 * @brief –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏ –æ—Ç -10 –¥–æ 15
 * @param arr_ptr –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –º–∞—Å—Å–∏–≤ —É–∫–∞–∑–∞—Ç–µ–ª–µ–π
 * @param rows_i16 –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
 * @param cols_i16 –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤
 */
void matrix_init_i32(i32_t **arr_ptr, i16_t rows_i16, i16_t cols_i16);

/**
 * @brief –ü–µ—á–∞—Ç–∞–µ—Ç –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã —Å —Ç–∞–±—É–ª—è—Ü–∏–µ–π
 * @param arr_ptr –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –º–∞—Å—Å–∏–≤ —É–∫–∞–∑–∞—Ç–µ–ª–µ–π
 * @param rows_i16 –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
 * @param cols_i16 –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤
 */
void matrix_print_i32(const i32_t **arr_ptr, i16_t rows_i16, i16_t cols_i16);

/**
 * @brief –¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä—É–µ—Ç –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ (—Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –∏ –∫–æ–ø–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã)
 * @param arr_ptr –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤
 * @param rows_i16 –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
 * @param cols_i16 –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
 * @return –ù–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
 */
i32_t **matrix_transpose_i32(i32_t **arr_ptr, i16_t rows_i16, i16_t cols_i16);

/**
 * @brief –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –ø–∞–º—è—Ç—å, –∑–∞–Ω—è—Ç—É—é –¥–≤—É–º–µ—Ä–Ω—ã–º –º–∞—Å—Å–∏–≤–æ–º
 * @param arr_ptr –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –º–∞—Å—Å–∏–≤ —É–∫–∞–∑–∞—Ç–µ–ª–µ–π
 * @param rows_i16 –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
 */
void matrix_free_i32(i32_t **arr_ptr, i16_t rows_i16);

/*** üß© –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π ***/

void matrix_init_i32(i32_t **arr_ptr, i16_t rows_i16, i16_t cols_i16)
{
    for (i16_t l_row_i16 = 0; l_row_i16 < rows_i16; ++l_row_i16)
    {
        for (i16_t l_col_i16 = 0; l_col_i16 < cols_i16; ++l_col_i16)
        {
            arr_ptr[l_row_i16][l_col_i16] = std::rand() % 26 - 10;
        }
    }
}

void matrix_print_i32(const i32_t **arr_ptr, i16_t rows_i16, i16_t cols_i16)
{
    for (i16_t l_row_i16 = 0; l_row_i16 < rows_i16; ++l_row_i16)
    {
        for (i16_t l_col_i16 = 0; l_col_i16 < cols_i16; ++l_col_i16)
        {
            std::cout << arr_ptr[l_row_i16][l_col_i16] << "\t";
        }
        std::cout << "\n";
    }
}

i32_t **matrix_transpose_i32(i32_t **arr_ptr, i16_t rows_i16, i16_t cols_i16)
{
    i32_t **l_tr_ptr = new i32_t *[cols_i16];

    for (i16_t l_col_i16 = 0; l_col_i16 < cols_i16; ++l_col_i16)
    {
        l_tr_ptr[l_col_i16] = new i32_t[rows_i16];
    }

    for (i16_t l_row_i16 = 0; l_row_i16 < rows_i16; ++l_row_i16)
    {
        for (i16_t l_col_i16 = 0; l_col_i16 < cols_i16; ++l_col_i16)
        {
            l_tr_ptr[l_col_i16][l_row_i16] = arr_ptr[l_row_i16][l_col_i16];
        }
    }

    return l_tr_ptr;
}

void matrix_free_i32(i32_t **arr_ptr, i16_t rows_i16)
{
    for (i16_t l_row_i16 = 0; l_row_i16 < rows_i16; ++l_row_i16)
    {
        delete[] arr_ptr[l_row_i16];
    }

    delete[] arr_ptr;
}

/*** üèÅ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ***/

int main(void)
{
    i16_t l_rows_i16 = 0;
    i16_t l_cols_i16 = 0;
    i16_t l_seed_i16 = 0;

    std::cin >> l_rows_i16 >> l_cols_i16 >> l_seed_i16;
    std::srand(l_seed_i16);

    i32_t **l_arr_ptr = new i32_t *[l_rows_i16];
    for (i16_t l_row_i16 = 0; l_row_i16 < l_rows_i16; ++l_row_i16)
    {
        l_arr_ptr[l_row_i16] = new i32_t[l_cols_i16];
    }

    matrix_init_i32(l_arr_ptr, l_rows_i16, l_cols_i16);

    matrix_print_i32(const_cast<const i32_t **>(l_arr_ptr), l_rows_i16, l_cols_i16);
    std::cout << "\n";

    i32_t **l_tr_ptr = matrix_transpose_i32(l_arr_ptr, l_rows_i16, l_cols_i16);

    matrix_print_i32(const_cast<const i32_t **>(l_tr_ptr), l_cols_i16, l_rows_i16);

    matrix_free_i32(l_arr_ptr, l_rows_i16);
    matrix_free_i32(l_tr_ptr, l_cols_i16);

    return 0;
}
